import axios from 'axios';

const scope = 'user-library-read user-top-read playlist-read-private playlist-modify-public';
let accessToken = '';
const clientId = process.env.REACT_APP_SPOTIFY_CLIENT_ID;

// Define the redirect URI based on the environment
const redirectUri =
  window.location.hostname === 'localhost'
    ? 'http://localhost:3000/callback'
    : 'https://custom-playlist-wizard.netlify.app/callback';

const Spotify = {
  // Login method to redirect the user to Spotify's authorization page
  login() {
    const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=${encodeURIComponent(
      scope
    )}&redirect_uri=${encodeURIComponent(redirectUri)}`;
    window.location = authUrl; // Redirect user to Spotify login
  },

  // Logout method to clear the access token
  logout() {
    accessToken = ''; // Clear the stored access token
    console.log('User logged out');
    window.history.pushState('Access Token', null, '/'); // Clean up URL
  },

  // Method to get access token
  getAccessToken() {
    console.log('Checking for access token...');

    if (accessToken) {
      console.log('Returning existing access token:', accessToken);
      return accessToken;
    }

    const tokenMatch = window.location.href.match(/access_token=([^&]*)/);
    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);

    if (tokenMatch && expiresInMatch) {
      accessToken = tokenMatch[1];
      const expiresIn = Number(expiresInMatch[1]);

      // Set token expiry
      window.setTimeout(() => {
        accessToken = '';
        console.log('Access token expired');
      }, expiresIn * 1000);

      // Clean up the URL by removing the token and expiry from the URL
      window.history.pushState('Access Token', null, '/');
      console.log('Access token received:', accessToken);
      return accessToken;
    } else {
      console.log('No token found, redirecting to login...');
      this.login();  // Redirect to the Spotify login page if no token
    }
  },

  // Method to get user info
  async getUserInfo(token) {
    try {
      const { data } = await axios.get('https://api.spotify.com/v1/me', {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      return data; // Return the user info
    } catch (error) {
      console.error('Error fetching user info:', error);
      throw error; // Propagate the error for handling in App.js
    }
  },

  // Method to create a playlist and add tracks to it
  async saveCustomPlaylist(customPlaylistName, trackUris) {
    const token = this.getAccessToken();
    if (!token) {
      console.error('No access token found');
      return;
    }

    try {
      // Step 1: Create a new playlist
      const { data: playlist } = await axios.post(
        'https://api.spotify.com/v1/me/playlists',
        {
          name: customPlaylistName,
          description: 'Generated by Jammming',
          public: true,
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      console.log('Playlist created:', playlist);

      // Step 2: Add tracks to the new playlist
      await this.addTracksToPlaylist(playlist.id, trackUris);
    } catch (error) {
      console.error('Error creating playlist:', error);
    }
  },

  // Method to add tracks to the playlist
  async addTracksToPlaylist(playlistId, trackUris) {
    const token = this.getAccessToken();
    if (!token) {
      console.error('No access token found');
      return;
    }

    try {
      const { data } = await axios.post(
        `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,
        { uris: trackUris },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      console.log('Tracks added:', data);
    } catch (error) {
      console.error('Error adding tracks:', error);
    }
  },

  // Method to search for tracks
  async searchTracks(query) {
    const token = this.getAccessToken();
    if (!token) {
      console.error('No access token found');
      return [];
    }

    try {
      const { data } = await axios.get('https://api.spotify.com/v1/search', {
        params: { q: query, type: 'track' },
        headers: { Authorization: `Bearer ${token}` },
      });
      return data.tracks.items; // Return the tracks from the response
    } catch (error) {
      console.error('Error fetching tracks from Spotify:', error);
      return []; // Return an empty array if error occurs
    }
  },
};

export default Spotify;
