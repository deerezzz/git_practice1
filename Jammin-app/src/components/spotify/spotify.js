import axios from 'axios';

const redirectUri = 'http://localhost:3000'; // Ensure this matches the one in your Spotify dashboard
const scope = 'user-library-read user-top-read playlist-read-private playlist-modify-public'; // Define the required scopes
let accessToken;
const clientId = process.env.REACT_APP_SPOTIFY_CLIENT_ID;
const clientSecret = process.env.REACT_APP_SPOTIFY_CLIENT_SECRET;

const Spotify = {
  // Function to get access token
  getAccessToken() {
    if (accessToken) {
      return accessToken; // Return existing token if it exists
    }

    // Check if token is present in URL
    const tokenMatch = window.location.href.match(/access_token=([^&]*)/);
    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);

    if (tokenMatch && expiresInMatch) {
      accessToken = tokenMatch[1];
      const expiresIn = Number(expiresInMatch[1]);

      // Clear token from URL after it's obtained
      window.setTimeout(() => (accessToken = ''), expiresIn * 1000);
      window.history.pushState('Access Token', null, '/');
      return accessToken;
    } else {
      // Redirect user to Spotify authorization page
      const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=${encodeURIComponent(scope)}&redirect_uri=${encodeURIComponent(redirectUri)}`;
      window.location = authUrl;
    }
  },

  // Method to create a playlist and add tracks to it
  async saveCustomPlaylist(customPlaylistName, trackUris) {
    const token = this.getAccessToken();
    if (!token) {
      console.error('No access token found');
      return;
    }

    try {
      // Step 1: Create a new playlist
      const { data: playlist } = await axios.post(
        'https://api.spotify.com/v1/me/playlists',
        {
          name: customPlaylistName,
          description: 'Generated by Jammming',
          public: true,
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      console.log('Playlist created:', playlist);

      // Step 2: Add tracks to the new playlist
      await this.addTracksToPlaylist(playlist.id, trackUris);
    } catch (error) {
      console.error('Error creating playlist:', error);
    }
  },

  // Method to add tracks to the playlist
  async addTracksToPlaylist(playlistId, trackUris) {
    const token = this.getAccessToken();
    if (!token) {
      console.error('No access token found');
      return;
    }

    try {
      const { data } = await axios.post(
        `https://api.spotify.com/v1/playlists/${playlistId}/tracks`,
        { uris: trackUris },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      console.log('Tracks added:', data);
    } catch (error) {
      console.error('Error adding tracks:', error);
    }
  },

  // Method to search for tracks
  async searchTracks(query) {
    const token = this.getAccessToken();
    if (!token) {
      console.error('No access token found');
      return [];
    }

    try {
      const { data } = await axios.get('https://api.spotify.com/v1/search', {
        params: { q: query, type: 'track' },
        headers: { Authorization: `Bearer ${token}` },
      });
      return data.tracks.items; // Return the tracks from the response
    } catch (error) {
      console.error('Error fetching tracks from Spotify:', error);
      return []; // Return an empty array if error occurs
    }
  },
};

export default Spotify;
